{"version":3,"sources":["dna-crypter.png","dnacrypter.js","serviceWorker.js","index.js"],"names":["module","exports","dna_dict","pad","num","size","s","length","Dnacrypter","className","class","src","dnaCrypterImg","alt","style","marginTop","href","id","name","type","onClick","message","document","getElementById","value","dna","encoded_message","test","i","ascii_base4","charCodeAt","toString","dna_seq","j","charAt","push","join","encode","dna_message","text","decoded_message","substring","nucleotide","ascii_base10","parseInt","String","fromCharCode","decode","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"oGAAAA,EAAOC,QAAU,IAA0B,yC,8KCIrCC,EAAW,CACb,EAAI,IACJ,EAAI,IACJ,EAAI,IACJ,EAAI,IACJ,EAAI,IACJ,EAAI,IACJ,EAAI,IACJ,EAAI,KAIR,SAASC,EAAIC,EAAKC,GAEd,IADA,IAAIC,EAAIF,EAAI,GACLE,EAAEC,OAASF,GAAMC,EAAI,IAAMA,EAClC,OAAOA,EA4FIE,MApCf,WACE,OACE,yBAAKC,UAAU,cACX,yBAAKA,UAAU,mBACX,2CACA,yBAAKA,UAAU,SACf,yBAAKC,MAAM,aACP,yBAAKA,MAAM,cACP,yBAAMC,IAAKC,IAAeC,IAAI,UAElC,yBAAKH,MAAM,gBACP,2BAAG,0CAAH,gEACA,uBAAGI,MAAO,CAACC,UAAW,QAAtB,4RAE8B,uBAAGC,KAAK,yFAAR,aAF9B,4KAMR,2HAAgG,uBAAGA,KAAK,2CAAR,QAAhG,MAEN,yBAAKP,UAAU,QACb,yBAAKA,UAAU,mBACX,2CACA,8BAAUQ,GAAG,eAAeC,KAAK,gBAAjC,oBACA,4BAAQC,KAAK,SAASC,QAAS,YA7E3C,WACI,IAAIC,EAAUC,SAASC,eAAe,gBAAgBC,MAClDC,EAAMH,SAASC,eAAe,cAC9BG,EAAkB,GAItB,GADgB,SAAAL,GAAO,MAAI,iBAAiBM,KAAKN,IACjD,CAMA,IAAK,IAAIO,EAAI,EAAGA,EAAIP,EAAQd,OAAQqB,IAAK,CAGrC,IAFA,IAAIC,EAAc1B,EAAIkB,EAAQS,WAAWF,GAAGG,SAAS,GAAI,GACrDC,EAAU,GACLC,EAAI,EAAGA,EAAIJ,EAAYtB,OAAQ0B,IACpCD,GAAW9B,EAAS2B,EAAYK,OAAOD,IAE3CP,EAAgBS,KAAKH,GAEzBP,EAAID,MAAQE,EAAgBU,KAAK,SAb7BX,EAAID,MAAQ,qDAqE8Ba,KAAtC,aAEJ,yBAAK5B,UAAU,oBACX,uCACA,8BAAUQ,GAAG,aAAaC,KAAK,cAA/B,mBACA,4BAAQC,KAAK,SAASC,QAAS,YAzD3C,WAOI,IANA,IAAIkB,EAAchB,SAASC,eAAe,cAAcC,MACpDe,EAAOjB,SAASC,eAAe,gBAC/BiB,EAAkB,GAGlBZ,EAAI,EACAU,EAAY/B,OAASqB,GAAM,GAAG,CAGlC,IAFA,IAAII,EAAUM,EAAYG,UAAUb,EAAGA,EAAI,GACvCC,EAAc,GACTI,EAAI,EAAGA,EAAID,EAAQzB,OAAQ0B,IAAK,CACrC,IAAIS,EAAaV,EAAQE,OAAOD,GAChC,KAAIS,KAAcxC,GAId,YADAqC,EAAKf,MAAO,oCAAsCkB,EAAa,gCAF/Db,EAAYM,KAAKjC,EAASwC,IAMlCb,EAAcA,EAAYO,KAAK,IAC/B,IAAIO,EAAeC,SAASA,SAASf,EAAa,GAAGE,SAAS,KAC9DS,EAAgBL,KAAKU,OAAOC,aAAaH,IACzCf,GAAK,EAETW,EAAKf,MAAQgB,EAAgBJ,KAAK,IAiCYW,KAAtC,gBC5FQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFjC,SAASC,eAAe,SDyHpB,kBAAmBiC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM1C,c","file":"static/js/main.c5824bd7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/dna-crypter.0929e90d.png\";","import React from 'react';\r\nimport './dnacrypter.css';\r\nimport dnaCrypterImg from './dna-crypter.png';\r\n\r\nconst dna_dict = {\r\n    '0':\"A\",\r\n    '1':\"G\",\r\n    '2':\"C\",\r\n    '3':\"T\",\r\n    'A':'0',\r\n    'G':'1',\r\n    'C':'2',\r\n    'T':'3'\r\n}\r\n\r\n/* Helper function to add zero padding to integers*/\r\nfunction pad(num, size) {\r\n    var s = num+\"\";\r\n    while (s.length < size) s = \"0\" + s;\r\n    return s;\r\n}\r\n\r\nfunction encode() {\r\n    var message = document.getElementById(\"text-message\").value;\r\n    var dna = document.getElementById(\"dna-output\");\r\n    var encoded_message = [];\r\n\r\n    /* Check if string is ASCII */\r\n    const isASCII = message => /^[\\x00-\\x7F]*$/.test(message);\r\n    if (!isASCII) {\r\n        dna.value = \"Sorry, we currently only process ASCII characters.\"\r\n        return;\r\n    }\r\n\r\n    /* Convert each character in the message into a four base DNA sequence */\r\n    for (var i = 0; i < message.length; i++) {\r\n        var ascii_base4 = pad(message.charCodeAt(i).toString(4), 4);\r\n        var dna_seq = \"\";\r\n        for (var j = 0; j < ascii_base4.length; j++) {\r\n            dna_seq += dna_dict[ascii_base4.charAt(j)];\r\n        }\r\n        encoded_message.push(dna_seq);\r\n    }\r\n    dna.value = encoded_message.join(\"\");\r\n    return;\r\n}\r\n\r\nfunction decode() {\r\n    var dna_message = document.getElementById(\"dna-output\").value;\r\n    var text = document.getElementById(\"text-message\");\r\n    var decoded_message = [];\r\n\r\n    /* Convert each four base DNA sequence into ASCII character */\r\n    var i = 0;\r\n    while ((dna_message.length - i) >= 4) {\r\n        var dna_seq = dna_message.substring(i, i + 4);\r\n        var ascii_base4 = [];\r\n        for (var j = 0; j < dna_seq.length; j++) {\r\n            var nucleotide = dna_seq.charAt(j);\r\n            if (nucleotide in dna_dict) {\r\n                ascii_base4.push(dna_dict[nucleotide]);\r\n            } else {\r\n                text.value= \"DNA includes invalid nucleotide '\" + nucleotide + \"'. Please fix and try again.\";\r\n                return;\r\n            }\r\n        }\r\n        ascii_base4 = ascii_base4.join(\"\");\r\n        var ascii_base10 = parseInt(parseInt(ascii_base4, 4).toString(10));\r\n        decoded_message.push(String.fromCharCode(ascii_base10));\r\n        i += 4;\r\n    }\r\n    text.value = decoded_message.join(\"\");\r\n    return;\r\n}\r\n\r\nfunction Dnacrypter() {\r\n  return (\r\n    <div className=\"Dnacrypter\">\r\n        <div className=\"title-container\">\r\n            <h1>dna-crypter</h1>\r\n            <div className=\"line\"></div>\r\n            <div class=\"spotlight\">\r\n                <div class=\"proj-image\">\r\n                    <img  src={dnaCrypterImg} alt=\"Logo\" />\r\n                </div>\r\n                <div class=\"proj-content\">\r\n                    <p><b>dna-crypter</b> is a program that allows users to encode ASCII text as DNA.</p>\r\n                    <p style={{marginTop: '0px'}}> Today, DNA technology is being developed at an unprecedented pace. Out of all the applications of DNA, one in particular \r\n                        has the chance to revolutionize the entire tech industry: DNA data storage. Instead of bits, we can encode information as nucleotide \r\n                        (A, C, G, T). It is being <a href=\"https://www.scientificamerican.com/article/dna-data-storage-is-closer-than-you-think/\">developed</a> as we speak. \r\n                        As with current data, there is a need to protect information. Thus, DNA cryptography, if not already, will become a pressing field in the near future.  </p>\r\n                </div>\r\n            </div>\r\n            <p>If you're interested in coming up with your own encryption, check out the source code here: [<a href=\"https://github.com/mrland99/dna-crypter\">Link</a>]</p>\r\n        </div>\r\n      <div className=\"flex\">\r\n        <div className=\"input-container\">\r\n            <label>Message:</label> \r\n            <textarea id=\"text-message\" name=\"text-message\" >Enter text here.</textarea>\r\n            <button type=\"button\" onClick={() => {encode()}}>Encrypt!</button>\r\n        </div>\r\n        <div className=\"output-container\">\r\n            <label>DNA:</label>\r\n            <textarea id=\"dna-output\" name=\"dna-output\" >Enter DNA here.</textarea>\r\n            <button type=\"button\" onClick={() => {decode()}}>Decrypt!</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Dnacrypter;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Dnacrypter from './dnacrypter'\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Dnacrypter />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}